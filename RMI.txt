Partie RMI :

*********************************************************************************************************************************

Déploiement pour un client :

Tout d'abord, il faut que le client ait accès au serveur, pour cela on lui donne l'adresse et le numéro de port du serveur.
Il faut qu'il puisse connaître le stub, les classes et méthodes qu'il peut utiliser. Il doit donc télécharger les bonnes interfaces depuis le serveur.
En effet, en RMI le client doit connaître l'interface de l'objet qu'il manipule
De plus on doit lui fournir un fichier client.policy. qui gerera la connection au security manger.

Comparé au socket, nous n'avons pas a savoir si on utilise de l'udp ou du tcp. Nous n'avons besoin que des informations précédentes

*********************************************************************************************************************************

Questions de recul :

* Quelles parties des codes Sockets se rapprochent le plus des stubs ?

Du coté du client, le stub permet de faire la liaison entre le client et les méthodes implémentées par le serveur.
Tout d'abord, le client doit se connecter au rmi registry grâce à son url. Pour cela il appelle la méthode
java.rmi.registry.LocateRegistry(String host, int port).
Ensuite, il récupère la référence de l'objet auquel il souhaite accéder sur le serveur avec la commande registry.lookup(name),
ou registry est le rmi registry auquel le client est connecté et name est le nom de l'objet a récupérer.
On met le résultat dans une variable locale du même type que l'objet du serveur (que l'on connait parce que l'interface nous a été fournie).
On peut maintenant travailler directement sur cet objet, comme si on travaillait en local !

Cette identification par url se rapproche de celle des Sockets puisque celle-ci demande l'adresse IP et le port.
En effet pour les Sockets on utilise la méthode java.net.Socket(InetAddress address, int port) pour se connecter au serveur.
Par contre, pas besoin de connaître le protocole de transport utilisé.

Du coté serveur, pour lancer le serveur il faut utiliser le rmiregistry.
Cela ressemble aux Sockets où il faut aussi lancer le serveur, cette fois-ci avec la méthode java.net.ServerSocket(int port)

Mais la comparaison s'arrete la car en Socket on envoie et on reçoit directement les objets, alors qu'en RMI
le client travaille "directement" sur l'objet du serveur comme si l'objet était local. (Même si en réalité il y a
toujours derrière les échanges d'objets)


* Comment la réflexivité Java peut être utilisée pour générer (ou remplacer) les stubs ?

La réflexivité permet de découvrir toutes sortes d'informations sur une classe,
comme la liste et le descriptif des méthodes publiques ainsi que le type des paramètres a lui passer,
les interfaces qu'elle implémente ou encore sa superclasse.
On pourrait donc utiliser directement les méthodes avec leurs paramètres depuis le client et le serveur
appelerait les bonnes méthodes grâce a la fonction invoke.

Même si ce changement est plus lourd à implémenter et à utiliser, il a un avantage par rapport aux stubs.
En effet il ne serait plus obligatoire de les regénérer après chaque modification. On peut récupérer toutes les informations
souhaitées grâce à la reflexivité
